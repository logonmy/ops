#!/usr/bin/python
# -*- coding:utf8 -*-

server_url = "http://127.0.0.1:8000"
script_path = '/tmp/script'

import os, urllib2, urllib
import subprocess
import datetime
import re
import logging
import sys
import struct
import tempfile
import threading
import getopt
import socket
import time
import itertools
import mimetools
import mimetypes
from cStringIO import StringIO
from logging.handlers import RotatingFileHandler

client_log_filename = tempfile.gettempdir() + os.path.sep + 'cli.log'

logger = logging.getLogger()
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)-25s %(module)s:%(lineno)d  %(levelname)-8s %(message)s',
    filename=client_log_filename,
    filemode='a')
logger.addHandler(
    RotatingFileHandler(
        filename=client_log_filename,
        maxBytes=100 * 1024 * 1024,
        backupCount=3))


class MultiPartForm(object):
    def __init__(self):
        self.form_fields = []
        self.files = []
        self.boundary = mimetools.choose_boundary()
        return

    def get_content_type(self):
        return 'multipart/form-data; boundary=%s' % self.boundary

    def add_field(self, name, value):
        self.form_fields.append((name, value))
        return

    def add_file(self, fieldname, filename, fileHandle, mimetype=None):
        body = fileHandle.read()
        if mimetype is None:
            mimetype = mimetypes.guess_type(filename)[
                0] or 'application/octet-stream'
        self.files.append((fieldname, filename, mimetype, body))
        return

    def __str__(self):
        parts = []
        part_boundary = '--' + self.boundary

        parts.extend([part_boundary,
                      'Content-Disposition: form-data; name="%s"' % name,
                      '',
                      value, ] for name, value in self.form_fields)

        parts.extend(
            [ part_boundary,
              'Content-Disposition: file; name="%s"; filename="%s"' % \
              (field_name, filename),
              'Content-Type: %s' % content_type,
              '',
              body,
              ]
            for field_name, filename, content_type, body in self.files
        )

        flattened = list(itertools.chain(*parts))
        flattened.append('--' + self.boundary + '--')
        flattened.append('')
        return '\r\n'.join(flattened)


class Command(object):
    def __init__(self, cmd):
        self.cmd = cmd
        self.process = None
        self.uuid = str(datetime.datetime.now()).replace(' ', '').replace(
            ':', '').replace('-', '').replace('.', '')
        self.result = open(tempfile.gettempdir() + os.path.sep + self.uuid,
                           'a+')

    def run(self, timeout=30):
        def target():
            logger.info(self.cmd)
            self.process = subprocess.Popen(
                self.cmd, shell=True, stdout=self.result, stderr=self.result)
            self.process.communicate()

        thread = threading.Thread(target=target)
        thread.start()
        thread.join(timeout)
        if thread.is_alive():
            logger.info(self.cmd)
            self.process.terminate()
            thread.join()
            util = Common()
            util.url_fetch(server_url + '/slowlog/log', {'cmd': self.cmd,
                                                         'ip':
                                                         util.get_one_ip()})
            return self.cmd
        result = open(tempfile.gettempdir() + os.path.sep + self.uuid,
                      'r').read()
        os.unlink(tempfile.gettempdir() + os.path.sep + self.uuid)
        return result


class Common(object):
    def urlencode(self, str):
        reprStr = repr(str).replace(r'\x', '%')
        return reprStr[1:-1]

    def download(self, filename):
        data = {'file': filename}
        data = urllib.urlencode(data)
        http_url = '%s/file/download?%s' % (server_url, data)
        try:
            conn = urllib2.urlopen(http_url)
            raw = conn.read()
            filename = os.path.basename(filename)
            if raw != '':
                f = open(filename, 'wb')
                f.write(raw)
                f.close()
            else:
                print 'file not exists,please upload it'
        except Exception, e:
            logger.error(e)
            print e

    def upload(self, filepath):
        boundary = '----------%s' % hex(int(time.time() * 1000))
        data = []
        data.append('--%s' % boundary)
        fr = open(filepath, 'rb')
        filename = os.path.basename(filepath)
        data.append('Content-Disposition: form-data; name="%s"\r\n' %
                    'filename')
        data.append(filename)
        data.append('--%s' % boundary)
        data.append('Content-Disposition: form-data; name="%s"; filename="%s"'
                    % ('file', filename))
        data.append('Content-Type: %s\r\n' % 'image/png')
        data.append(fr.read())
        fr.close()
        data.append('--%s--\r\n' % boundary)

        http_url = '%s/file/upload' % server_url
        http_body = '\r\n'.join(data)
        try:
            req = urllib2.Request(http_url, data=http_body)
            req.add_header('Content-Type',
                           'multipart/form-data; boundary=%s' % boundary)
            req.add_header('User-Agent', 'Mozilla/5.0')
            req.add_header('Referer', 'http://www.taobao.com/')
            resp = urllib2.urlopen(req, timeout=5)
            qrcont = resp.read()
            print qrcont
        except Exception, e:
            logger.error(e)
            print e

    def ip2int(self, server_ip):
        return struct.unpack("!I", socket.inet_aton(server_ip))[0]

    def int2ip(self, interger):
        return socket.inet_ntoa(struct.pack("!I", interger))

    def request_id(self, uid, server_ip):
        ip2int = self.ip2int(server_ip)
        now_time = time.time()
        request_id = str(ip2int)[-8:] + str(now_time).replace(
            '.', '')[-8:] + str(uid)[-4:]
        return request_id.replace('.', '')

    def url_fetch(self, url, data=None, timeout=30):
        html = ''
        try:
            uid = os.getuid()
            server_ip = self.get_one_ip()

            form = MultiPartForm()
            if data != None:
                for k, v in enumerate(data):
                    if v != 'f' is not None and not os.path.isfile(data[v]):
                        form.add_field(v, data[v])
                    else:  #file
                        f = open(data[v], 'r')
                        res = f.read()
                        form.add_file(
                            'f', filename=data[v], fileHandle=StringIO(res))
                        f.close()

            # Build the request
            request = urllib2.Request(url=url)
            request.add_header(
                'User-agent',
                'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6')
            body = str(form)
            request.add_header('Content-type', form.get_content_type())
            request.add_header('Content-length', len(body))
            request.add_header('Login-user', os.getlogin())
            request.add_header('Login-uid', uid)
            request.add_header('Login-gid', os.getgid())
            request.add_header('Server-ip', server_ip)
            request.add_header('Exec-path', os.getcwd())
            request.add_header('Hostname', self.get_hostname())
            request.add_header('Request-id', self.request_id(uid, server_ip))
            request.add_data(body)
            html = urllib2.urlopen(request).read()

            charset = re.compile(
                r'<meta[^>]*charset=[\'\"]*?([a-z0-8\-]+)[\'\"]?[^>]*?>',
                re.IGNORECASE).findall(html)
            if len(charset) > 0:
                if charset[0] == 'gb2312':
                    charset[0] = 'gbk'
                html = unicode(html, charset[0])
        except Exception as e:
            if hasattr(e, 'msg'):
                print(e.msg)
            else:
                print e

            logger.error(e)
        return html

    def parse_argv(self, argv):
        data = {}
        long_args = []
        short_args = []
        for v in argv:
            if v.startswith('--'):
                long_args.append(v.replace('--', '') + "=")
            elif v.startswith('-'):
                short_args.append(v.replace('-', ''))
        opts = getopt.getopt(argv, ":".join(short_args) + ":", long_args)
        for opt in opts[0]:
            data[opt[0].replace('-', '')] = opt[1]
        if len(data) > 0:
            return data
        else:
            return argv

    def execute(self, cmd):
        try:
            return os.popen(cmd).read()
        except Exception as err:
            logger.error(err)
            return ""

    def get_one_ip(self):
        hostname = self.get_hostname()
        ret = socket.gethostbyname(hostname)
        return ret.strip()

    def get_hostname(self):
        os_name = os.name
        host_name = None
        if os_name == 'nt':
            host_name = os.getenv('computername')
        elif os_name == 'posix':
            host = os.popen('hostname')
            try:
                host_name = host.read().strip()
            finally:
                host.close()
        return host_name

    def command_args(self, args):
        if isinstance(args, list) or isinstance(args, tuple):
            return '"%s"' % '" "'.join(args)
        else:
            return str(args)


class Cli():
    def __init__(self):
        self.entry = server_url + "/%s"
        self.util = Common()

    def download(self, args):
        self.util.download(args[0])

    def upload(self, args):
        self.util.upload(args[0])

    def listfile(self, args):
        ret = self.util.url_fetch(self.entry % 'file/listfile')
        print(ret)

    def rpmupload(self, args):
        argv = self.util.parse_argv(args[0:])
        if isinstance(argv, list):
            argv = {}
        cobbler_ips = self.util.url_fetch(self.entry % '/cobbler/list_cobbler')
        form = MultiPartForm()
        if argv != None:
            for k, v in enumerate(argv):
                if v != 'f' is not None and not os.path.isfile(argv[v]):
                    form.add_field(v, argv[v])
                else:  #file
                    f = open(argv[v], 'r')
                    res = f.read()
                    filepath, filename = os.path.split(argv[v])
                    form.add_file(
                        os.path.basename(argv[v]),
                        filename=filename,
                        fileHandle=StringIO(res))
                    f.close()
        #sync file to every idc
        for cobbler_ip in cobbler_ips:
            request = urllib2.Request(url='http://' + cobbler_ip + ':8080')
            body = str(form)
            request.add_data(body)
            html = urllib2.urlopen(request).read()
            print html

    def help(self, args):
        ret = self.util.url_fetch(self.entry % 'help/list')
        print(ret)

    def default(self, cmd, args):
        argv = self.util.parse_argv(args[1:])
        if isinstance(argv, list):
            argv = {}
        ret = self.util.url_fetch(self.entry % cmd, argv)
        print(ret)

    def shell(self, args):
        if len(args) < 1:
            print('ERROR: param is not enough')
            sys.exit(0)
        path = script_path
        if not os.path.exists(path):
            os.makedis(path, 0777)

        fn = path + os.path.sep + args[0]
        src = ''
        is_python = False
        if not os.path.exists(fn) or os.stat(fn).st_mtime < (
                time.time() - 10 * 60):
            self.download(args)
            self.util.execute("mv ./%s %s" % (args[0], fn))

        src = open(fn, 'r').read()

        lines = re.split(r'\n', src)
        for line in lines:
            if line.strip() != '':
                break
        if line.find('python') > 0:
            is_python = True
        if is_python:
            cmd = Command('/usr/bin/python %s %s' %
                          (fn, self.util.command_args(args[1:])))
            result = cmd.run(60 * 60 * 24)
        else:
            cmd = Command('/bin/bash %s %s' %
                          (fn, self.util.command_args(args[1:])))
            result = cmd.run(60 * 60 * 24)
        print(result)


if __name__ == '__main__':

    cli = Cli()
    util = Common()
    if len(sys.argv) < 2:
        cli.help(sys.argv)
    else:
        ctl = sys.argv[1]
        if len(sys.argv) > 2:
            cmd = sys.argv[2]
        else:
            cmd = 'help'
        if hasattr(cli, ctl):
            getattr(cli, ctl)(sys.argv[2:])
        else:
            cli.default(ctl + '/' + cmd, sys.argv[2:])
